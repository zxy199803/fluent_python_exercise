"""
把接口继承和实现继承区分开
    为什么创建子类
        继承接口：创建子类型实现“是什么”关系。是框架的支柱
        继承实现：通过重用避免代码重复。是实现细节，可以换用组合和委托模式

使用抽象基类显示表示接口
    如果类的作用是定义接口，应明确把它定义为抽象基类。创建acb.ABC或其他抽象基类的子类

通过混入重用代码
    混入类(mixin class)：为多个不相关的子类提供方法实现从而实现重用，但不体现“是什么”关系
    混入不定义新类型，只是打包方法。
    混入类绝对不能实例化，具体类不能只继承混入类。混入类应提供某些方面的特定行为，只实现少量关系非常紧密的方法

在名称中明确指明混入
    在名称中加入Mixin后缀

抽象基类可以作为混入，反之不行
    抽象基类可以实现具体方法，因此可以作为混入使用。
    抽象基类会定义类型，可以作为其他类的唯一基类
    抽象基类中实现的具体方法只能与抽象基类及其超类中的方法协作

不要子类化多个具体类
   具体类可以没有或最多只有一个具体超类。具体类的超类中除了一个具体超类外，其余都是抽象基类或混入

为用户提供聚合类
    抽象基类或混入的组合对客户代码非常有用，就提供一个类用易于理解的方式把它们结合起来
    聚合类：如果一个类的结构主要继承自混入，自身没有添加结构或行为
    例如tkinter.Widget类
    class Widget(BaseWidget, Pack, Place, Grid):
    \"""Internal class.
    Base class for a widget which can be positioned with the
    geometry managers Pack, Place or Grid.\"""
    pass

    定义体是空的，但是提供了有用的服务，把四个超类结合在一起，需要创建新小组件的用户无需记住全部混入及其特定顺序

优先使用对象组合而不是类继承
    子类化是一种紧耦合，较高的继承树容易倒
"""
